// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.0
// source: api/oss/v1/oss.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOssDelete = "/api.oss.v1.Oss/Delete"
const OperationOssGetUrl = "/api.oss.v1.Oss/GetUrl"
const OperationOssRestore = "/api.oss.v1.Oss/Restore"

type OssHTTPServer interface {
	Delete(context.Context, *OssRequest) (*OssReply, error)
	GetUrl(context.Context, *OssRequest) (*OssReply, error)
	Restore(context.Context, *OssRequest) (*OssReply, error)
}

func RegisterOssHTTPServer(s *http.Server, srv OssHTTPServer) {
	r := s.Route("/")
	r.GET("/oss/get_url", _Oss_GetUrl0_HTTP_Handler(srv))
	r.DELETE("/oss/delete", _Oss_Delete0_HTTP_Handler(srv))
	r.POST("/oss/restore", _Oss_Restore0_HTTP_Handler(srv))
}

func _Oss_GetUrl0_HTTP_Handler(srv OssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OssRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOssGetUrl)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUrl(ctx, req.(*OssRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OssReply)
		return ctx.Result(200, reply)
	}
}

func _Oss_Delete0_HTTP_Handler(srv OssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OssRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOssDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*OssRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OssReply)
		return ctx.Result(200, reply)
	}
}

func _Oss_Restore0_HTTP_Handler(srv OssHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OssRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOssRestore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Restore(ctx, req.(*OssRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OssReply)
		return ctx.Result(200, reply)
	}
}

type OssHTTPClient interface {
	Delete(ctx context.Context, req *OssRequest, opts ...http.CallOption) (rsp *OssReply, err error)
	GetUrl(ctx context.Context, req *OssRequest, opts ...http.CallOption) (rsp *OssReply, err error)
	Restore(ctx context.Context, req *OssRequest, opts ...http.CallOption) (rsp *OssReply, err error)
}

type OssHTTPClientImpl struct {
	cc *http.Client
}

func NewOssHTTPClient(client *http.Client) OssHTTPClient {
	return &OssHTTPClientImpl{client}
}

func (c *OssHTTPClientImpl) Delete(ctx context.Context, in *OssRequest, opts ...http.CallOption) (*OssReply, error) {
	var out OssReply
	pattern := "/oss/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOssDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OssHTTPClientImpl) GetUrl(ctx context.Context, in *OssRequest, opts ...http.CallOption) (*OssReply, error) {
	var out OssReply
	pattern := "/oss/get_url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOssGetUrl))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OssHTTPClientImpl) Restore(ctx context.Context, in *OssRequest, opts ...http.CallOption) (*OssReply, error) {
	var out OssReply
	pattern := "/oss/restore"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOssRestore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
