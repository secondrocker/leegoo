// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.11.4
// source: api/kvstore/v1/kv.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKvDel = "/api.kvstore.v1.Kv/Del"
const OperationKvGet = "/api.kvstore.v1.Kv/Get"
const OperationKvSet = "/api.kvstore.v1.Kv/Set"

type KvHTTPServer interface {
	Del(context.Context, *KvRequest) (*KvReply, error)
	Get(context.Context, *KvRequest) (*KvReply, error)
	Set(context.Context, *KvRequest) (*KvReply, error)
}

func RegisterKvHTTPServer(s *http.Server, srv KvHTTPServer) {
	r := s.Route("/")
	r.POST("/kvstore", _Kv_Set0_HTTP_Handler(srv))
	r.GET("/kvstore/{key}", _Kv_Get0_HTTP_Handler(srv))
	r.DELETE("/kvstore/{key}", _Kv_Del0_HTTP_Handler(srv))
}

func _Kv_Set0_HTTP_Handler(srv KvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKvSet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Set(ctx, req.(*KvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KvReply)
		return ctx.Result(200, reply)
	}
}

func _Kv_Get0_HTTP_Handler(srv KvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KvRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKvGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*KvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KvReply)
		return ctx.Result(200, reply)
	}
}

func _Kv_Del0_HTTP_Handler(srv KvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KvRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKvDel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Del(ctx, req.(*KvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KvReply)
		return ctx.Result(200, reply)
	}
}

type KvHTTPClient interface {
	Del(ctx context.Context, req *KvRequest, opts ...http.CallOption) (rsp *KvReply, err error)
	Get(ctx context.Context, req *KvRequest, opts ...http.CallOption) (rsp *KvReply, err error)
	Set(ctx context.Context, req *KvRequest, opts ...http.CallOption) (rsp *KvReply, err error)
}

type KvHTTPClientImpl struct {
	cc *http.Client
}

func NewKvHTTPClient(client *http.Client) KvHTTPClient {
	return &KvHTTPClientImpl{client}
}

func (c *KvHTTPClientImpl) Del(ctx context.Context, in *KvRequest, opts ...http.CallOption) (*KvReply, error) {
	var out KvReply
	pattern := "/kvstore/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKvDel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KvHTTPClientImpl) Get(ctx context.Context, in *KvRequest, opts ...http.CallOption) (*KvReply, error) {
	var out KvReply
	pattern := "/kvstore/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKvGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KvHTTPClientImpl) Set(ctx context.Context, in *KvRequest, opts ...http.CallOption) (*KvReply, error) {
	var out KvReply
	pattern := "/kvstore"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKvSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
